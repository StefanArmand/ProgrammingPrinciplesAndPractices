#include "std_lib_facilies.h"
#include <iostream>

using namespace std;

int main()
{
	cout << "Terms: \n";
	cout << "// = token that signals comment break \n";
	cout << "<< = output operator \n";
	cout << "C++ = the compiled programming language \n";
	cout << "comment = a text that does not get compiled, that is marked with // \n";
	cout << "compiler = a program that turn writen text into commands that the computer can understand \n";
	cout << "compile time error = error found by the compiler \n";
	cout << "cout = character output stream \n";
	cout << "executable = file that can be run when selected \n";
	cout << "function = a set of instructions \n";
	cout << "header = a file that contains definitions of terms\n";
	cout << "IDE = integrated development environment \n";
	cout << "#include = a directive that adds a source file into another \n";
	cout << "library = code written by others we access using #include \n";
	cout << "linker = parts we write combined with parts from the C++ standard library \n";
	cout << "main() = the main function\n";
	cout << "object code = a region of memory with a type that specifies what kind of information can be placed in it \n";
	cout << "statement = action to be performed\n";
	cout << "assignment = the = operator, that gives a variable a new value\n";
	cout << "cin = the command that takes in what the user writes\n";
	cout << "concatenation = adding text at the end of a string \n";
	cout << "conversion = turing a type of format from one to another, from int to double \n";
	cout << "declaration = when you give a name to an object \n";
	cout << "decrement = subtract \n";
	cout << "definition = statement that introduces a new name and sets aside memory for a variable \n";
	cout << "increment = add \n";
	cout << "initialization = the starting value \n";
	cout << "name = the name of the variable \n";
	cout << "narrowing = putting a value into an object that may be too small \n";
	cout << "object = a region of memory with a type that specifies what kind of infomration can be placed in it \n";
	cout << "operation = a set of instruction the user wants \n";
	cout << "operator = like '=' '||' and so on \n";
	cout << "type = the type of variable in memory, like int, char, bool \n";
	cout << "type safety = using the type as its meant to be used \n";
	cout << "value = what is the value of a variable \n";
	cout << "variable = an object that is named and has memory assigned to it \n";
	cout << "abstraction = hide details we don't need, like certain algorithms \n";
	cout << "begin() = a function that is beggining a computation \n";
	cout << "computation = act of producing output using some input \n";
	cout << "conditional statement = like break, case\n";
	cout << "declaration = a statement that gives a name to an object \n";
	cout << "definition = declaration that sets aside memory for an object \n";
	cout << "divide and conquer = split the problem in smaller pieces that you can solve \n";
	cout << "else = when using if, else is used when the condition inside if doesn't apply \n";
	cout << "end() = function that ends the program \n";
	cout << "expression = a set of operands \n";
	cout << "for-statement = an iteration statement that repeats for as long as the for conditions are met \n";
	cout << "range for statement = the number of repetions in the for statement \n";
	cout << "function = computation moved into its own separated part so it can be reused \n";
	cout << "if-statement = iteration that checks condition inside paranthesis, and if its true executes, if false moves on to else \n";
	cout << "increment = add \n";
	cout << "input = asking for the user to add values or getting values from other parts of the program \n";
	cout << "iteration = on repetion of a program that repeats a certain number of times \n";
	cout << "loop = the complete execution of one repetion of a iteration \n";
	cout << "lvalue = the left value, that names the object \n";
	cout << "member function = the dot is a member function call \n";
	cout << "output = the results after finishing executing a program \n";
	cout << "push_back() = a function member of vector that adds an element at the end of the vector \n";
	cout << "repetition = a loop \n";
	cout << "rvalue = the assigned value of the object \n";
	cout << "selection = choose among alternative actions \n";
	cout << "size() = a function to see the size of an object \n";
	cout << "sort() = a sorting function \n";
	cout << "statement = expression statements and declarations \n";
	cout << "switch-statement = a statement that switches between various results according to the mentioned cases \n";
	cout << "vector = a string of values \n";
	cout << "while-statemenet = a statement that continues to run while a certain condition is true \n";
	cout << "argument error = a parameter specified badly \n";
	cout << "assertion = something that must be true in that program \n";
	cout << "catch = catch an exception \n";
	cout << "compile-time error = error caught when compiling \n";
	cout << "container = collections of data, like a vector \n";
	cout << "debugging = finding bugs \n";
	cout << "error = message that your program doesn't compile \n";
	cout << "exception = an indication of what went wrong \n";
	cout << "invariant = conditions that should always hold \n";
	cout << "link-time error = error related to linked libraries \n";
	cout << "logic error = error in judgement of the programmer \n";
	cout << "post-condition = even if the pre condition is true, a check to see if the result is appropriate as well \n";
	cout << "pre-condition = it must be true for a function to continue \n";
	cout << "range error = if we misuse vectors \n";
	cout << "requirement = a desired outcome of the program \n";
	cout << "run time error = errors that appear at run time \n";
	cout << "syntax error = error that appears because of bad writing of code \n";
	cout << "testing = testing the rpgram to check for errors \n";
	cout << "throw = throw an error if the assertion isn't true \n";
	cout << "type error = if you put data that doesn't belong in the type \n";
	cout << " \n";
	cout << " \n";
	cout << " \n";
	cout << " \n";
	cout << " \n";
	cout << " \n";
	cout << " \n";
	cout << " \n";
	cout << " \n";
	cout << " \n";
	cout << " \n";
	cout << " \n";
	cout << " \n";
	cout << " \n";
	cout << " \n";
	cout << " \n";
	cout << " \n";
	cout << " \n";
	cout << " \n";
	cout << " \n";
	cout << " \n";
	cout << " \n";
	cout << " \n";
	cout << " \n";
	cout << " \n";

	keep_window_open();
	return 0;
}